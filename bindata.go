package render

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func fixtures_amber_example_amber() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x4a, 0xad,
		0x28, 0x49, 0xcd, 0x4b, 0x29, 0x56, 0xc8, 0x49, 0xac, 0xcc, 0x2f, 0x2d,
		0x29, 0xd6, 0x4f, 0x4a, 0x2c, 0x4e, 0xe5, 0x52, 0x00, 0x02, 0xae, 0xa4,
		0x9c, 0xfc, 0xe4, 0x6c, 0x85, 0xe4, 0xfc, 0x3c, 0xa0, 0x82, 0x12, 0xb0,
		0x50, 0x81, 0x42, 0x48, 0x46, 0x66, 0xb1, 0x02, 0x10, 0x95, 0x64, 0xa4,
		0x2a, 0x14, 0x24, 0xa6, 0xa7, 0xc2, 0xa4, 0x15, 0xc1, 0xf2, 0xa5, 0x39,
		0x60, 0x0a, 0x04, 0x72, 0x32, 0x61, 0x6a, 0x91, 0x85, 0x82, 0xf3, 0x73,
		0x53, 0x15, 0x72, 0xf3, 0x8b, 0x52, 0x91, 0x05, 0x95, 0xab, 0xc3, 0x12,
		0x8b, 0x42, 0xca, 0xf3, 0x6b, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfe,
		0xaa, 0x8a, 0xe5, 0x8b, 0x00, 0x00, 0x00,
	},
		"fixtures/amber/example.amber",
	)
}

func fixtures_amber_layouts_base_amber() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0x28,
		0xc9, 0xcd, 0xe1, 0x52, 0x00, 0x82, 0x8c, 0xd4, 0xc4, 0x14, 0x30, 0x03,
		0x04, 0x4a, 0x32, 0x4b, 0x72, 0x52, 0x15, 0x02, 0x12, 0xd3, 0x53, 0x15,
		0x42, 0x40, 0x4c, 0xb0, 0x44, 0x52, 0x7e, 0x4a, 0x25, 0x5c, 0x45, 0x4a,
		0x66, 0x99, 0x32, 0x48, 0x4b, 0x6a, 0x11, 0x5c, 0x08, 0x04, 0x4a, 0x73,
		0x50, 0xb8, 0x20, 0x90, 0x93, 0xa9, 0xe0, 0x91, 0x9f, 0x9b, 0x8a, 0x4d,
		0xdc, 0x37, 0x35, 0xaf, 0x14, 0x9b, 0xb8, 0x63, 0x52, 0x7e, 0x69, 0x09,
		0x36, 0x09, 0xe5, 0xea, 0xb0, 0xc4, 0x22, 0xff, 0xbc, 0xd4, 0x5a, 0xb8,
		0x64, 0x52, 0x4e, 0x7e, 0x72, 0xb6, 0x42, 0x72, 0x7e, 0x5e, 0x49, 0x6a,
		0x5e, 0x09, 0x20, 0x00, 0x00, 0xff, 0xff, 0x45, 0x31, 0x88, 0x27, 0xcd,
		0x00, 0x00, 0x00,
	},
		"fixtures/amber/layouts/base.amber",
	)
}

func fixtures_basic_admin_index_tmpl() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xb2, 0xc9,
		0x30, 0xb4, 0x73, 0x4c, 0xc9, 0xcd, 0xcc, 0x53, 0xa8, 0xae, 0xd6, 0xab,
		0xad, 0xb5, 0xd1, 0x07, 0xf2, 0xb9, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff,
		0x75, 0xdd, 0x6e, 0xbe, 0x15, 0x00, 0x00, 0x00,
	},
		"fixtures/basic/admin/index.tmpl",
	)
}

func fixtures_basic_another_layout_tmpl() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x4a, 0xcc,
		0xcb, 0x2f, 0xc9, 0x48, 0x2d, 0x52, 0xc8, 0x48, 0x4d, 0x4c, 0xe1, 0xaa,
		0xae, 0x56, 0xa8, 0xcc, 0x4c, 0xcd, 0x49, 0x51, 0xa8, 0xad, 0xe5, 0x82,
		0x49, 0xa4, 0xe5, 0xe7, 0x97, 0x70, 0x01, 0x02, 0x00, 0x00, 0xff, 0xff,
		0xb5, 0x95, 0xd0, 0x8a, 0x26, 0x00, 0x00, 0x00,
	},
		"fixtures/basic/another_layout.tmpl",
	)
}

func fixtures_basic_content_tmpl() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xb2, 0xc9,
		0x30, 0xb4, 0xab, 0xae, 0x56, 0xd0, 0x53, 0xa8, 0xad, 0xb5, 0xd1, 0x07,
		0xb2, 0xb9, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x7b, 0xb2, 0x97,
		0x11, 0x00, 0x00, 0x00,
	},
		"fixtures/basic/content.tmpl",
	)
}

func fixtures_basic_current_layout_tmpl() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xaa, 0xae,
		0x56, 0x48, 0x2e, 0x2d, 0x2a, 0x4a, 0xcd, 0x2b, 0x51, 0xa8, 0xad, 0x55,
		0xc8, 0x48, 0x4d, 0x4c, 0xe1, 0x02, 0x0a, 0x55, 0x66, 0xa6, 0xe6, 0xa4,
		0x00, 0x05, 0xb8, 0x50, 0xa5, 0xd3, 0xf2, 0xf3, 0x4b, 0xb8, 0x00, 0x01,
		0x00, 0x00, 0xff, 0xff, 0x4c, 0x22, 0xa0, 0x2e, 0x32, 0x00, 0x00, 0x00,
	},
		"fixtures/basic/current_layout.tmpl",
	)
}

func fixtures_basic_delims_tmpl() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xb2, 0xc9,
		0x30, 0xb4, 0xf3, 0x48, 0xcd, 0xc9, 0xc9, 0x57, 0xa8, 0x8e, 0xae, 0xd6,
		0xab, 0x8d, 0xad, 0xb5, 0xd1, 0x07, 0x8a, 0x00, 0x02, 0x00, 0x00, 0xff,
		0xff, 0xd2, 0xa1, 0xd8, 0x9b, 0x16, 0x00, 0x00, 0x00,
	},
		"fixtures/basic/delims.tmpl",
	)
}

func fixtures_basic_hello_tmpl() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xb2, 0xc9,
		0x30, 0xb4, 0xf3, 0x48, 0xcd, 0xc9, 0xc9, 0x57, 0xa8, 0xae, 0xd6, 0xab,
		0xad, 0xb5, 0xd1, 0x07, 0xf2, 0xb9, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff,
		0x39, 0xa4, 0x7e, 0x91, 0x15, 0x00, 0x00, 0x00,
	},
		"fixtures/basic/hello.tmpl",
	)
}

func fixtures_basic_hypertext_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xf2, 0xa8,
		0x2c, 0x48, 0x2d, 0x2a, 0x49, 0xad, 0x28, 0x51, 0xe4, 0x02, 0x04, 0x00,
		0x00, 0xff, 0xff, 0xf4, 0x48, 0x57, 0x4e, 0x0b, 0x00, 0x00, 0x00,
	},
		"fixtures/basic/hypertext.html",
	)
}

func fixtures_basic_layout_tmpl() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0x48,
		0x4d, 0x4c, 0xe1, 0xaa, 0xae, 0x56, 0xa8, 0xcc, 0x4c, 0xcd, 0x49, 0x51,
		0xa8, 0xad, 0xe5, 0x4a, 0xcb, 0xcf, 0x2f, 0xe1, 0x02, 0x04, 0x00, 0x00,
		0xff, 0xff, 0xc9, 0x23, 0x23, 0x40, 0x16, 0x00, 0x00, 0x00,
	},
		"fixtures/basic/layout.tmpl",
	)
}

func fixtures_custom_funcs_index_tmpl() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xaa, 0xae,
		0x56, 0xc8, 0xad, 0x74, 0x2e, 0x2d, 0x2e, 0xc9, 0xcf, 0x75, 0x2b, 0xcd,
		0x4b, 0x56, 0xa8, 0xad, 0xe5, 0x02, 0x04, 0x00, 0x00, 0xff, 0xff, 0xbb,
		0x9f, 0x75, 0x63, 0x13, 0x00, 0x00, 0x00,
	},
		"fixtures/custom_funcs/index.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"fixtures/amber/example.amber": fixtures_amber_example_amber,
	"fixtures/amber/layouts/base.amber": fixtures_amber_layouts_base_amber,
	"fixtures/basic/admin/index.tmpl": fixtures_basic_admin_index_tmpl,
	"fixtures/basic/another_layout.tmpl": fixtures_basic_another_layout_tmpl,
	"fixtures/basic/content.tmpl": fixtures_basic_content_tmpl,
	"fixtures/basic/current_layout.tmpl": fixtures_basic_current_layout_tmpl,
	"fixtures/basic/delims.tmpl": fixtures_basic_delims_tmpl,
	"fixtures/basic/hello.tmpl": fixtures_basic_hello_tmpl,
	"fixtures/basic/hypertext.html": fixtures_basic_hypertext_html,
	"fixtures/basic/layout.tmpl": fixtures_basic_layout_tmpl,
	"fixtures/custom_funcs/index.tmpl": fixtures_custom_funcs_index_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"fixtures": &_bintree_t{nil, map[string]*_bintree_t{
		"amber": &_bintree_t{nil, map[string]*_bintree_t{
			"example.amber": &_bintree_t{fixtures_amber_example_amber, map[string]*_bintree_t{
			}},
			"layouts": &_bintree_t{nil, map[string]*_bintree_t{
				"base.amber": &_bintree_t{fixtures_amber_layouts_base_amber, map[string]*_bintree_t{
				}},
			}},
		}},
		"basic": &_bintree_t{nil, map[string]*_bintree_t{
			"layout.tmpl": &_bintree_t{fixtures_basic_layout_tmpl, map[string]*_bintree_t{
			}},
			"admin": &_bintree_t{nil, map[string]*_bintree_t{
				"index.tmpl": &_bintree_t{fixtures_basic_admin_index_tmpl, map[string]*_bintree_t{
				}},
			}},
			"another_layout.tmpl": &_bintree_t{fixtures_basic_another_layout_tmpl, map[string]*_bintree_t{
			}},
			"content.tmpl": &_bintree_t{fixtures_basic_content_tmpl, map[string]*_bintree_t{
			}},
			"current_layout.tmpl": &_bintree_t{fixtures_basic_current_layout_tmpl, map[string]*_bintree_t{
			}},
			"delims.tmpl": &_bintree_t{fixtures_basic_delims_tmpl, map[string]*_bintree_t{
			}},
			"hello.tmpl": &_bintree_t{fixtures_basic_hello_tmpl, map[string]*_bintree_t{
			}},
			"hypertext.html": &_bintree_t{fixtures_basic_hypertext_html, map[string]*_bintree_t{
			}},
		}},
		"custom_funcs": &_bintree_t{nil, map[string]*_bintree_t{
			"index.tmpl": &_bintree_t{fixtures_custom_funcs_index_tmpl, map[string]*_bintree_t{
			}},
		}},
	}},
}}
